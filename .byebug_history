c
payload.sort_by { |k| k[:score] }.reverse
payload.sort_by { |k| k[:score] }
payload.sort_by.reverse { |k| k[:score] }
payload
c
lower_leaderboard
higher_leaderboard
c
higher_leaderboard = ScoreBoard.joins(:user).select('score_boards.score, users.name').where('score_boards.score >= ?', user_score.score).order('score_boards.score ASC').limit(10).collect{ |x| {name: x.name, score: x.score}}
higher_leaderboard = ScoreBoard.joins(:user).select('score_boards.score, users.name').where('score_boards.score >= ?', user_score.score).order('score_boards.score ASC').limit(10).collect{ |x| name: x.name, score: x.score}}
}
score: x.score
name: x.name,
{
higher_leaderboard = ScoreBoard.joins(:user).select('score_boards.score, users.name').where('score_boards.score >= ?', user_score.score).order('score_boards.score ASC').limit(10).collect{ |x| 
user_score = ScoreBoard.where(user_id: params[:user_id]).first
c
params[:score].to_i
@score_board
c
score_board_params
params
@score_board
c
self.user
c
self.user_id
self.user
c
User.first.score_board
ScoreBoard.count
self.user
self.user_id
self
self.user_id
self.user
self.score
$redis_leader_board.zcard('leaderboard') >= 20
